Thoughts
----------------------------------
* 写程序不单单是和机器沟通，更是和未来要看这段程序的人沟通的。试想要给另一个人讲解代码
   ，首先你自己会在代码的每个层次上广度优先讲解，其次针对对方的提问，这提问却总是在一
  个层次上的（如果对方提了两个层次，你也会给对方分成两个层次讲），所以这一个层次的相关
  代码以某种方式集中在一个地方是有好处的，就像我们真实世界所谓有条理的布局一样。   －－
  － 和函数式编程的固定输入输出一样（即变量不可以被重复赋值），把语境严格的划分在人类思
  维完全可以理解的范围内也是可行的。

* 人类思维是否都是完全等价的。即只要有足够的耐心和时间讲解，对方一定会明白，然后 TA 也
  可以这样讲解给第三者。类似计算机的 CPU 和 IO ，以及信息传递。

* 在代码文件布局上保持在每个层次上都有一个 self 。Java 里的目录命名空间也是一种方式。

* 世界是复杂而又简单的，这种复调同像性在世界各个远近高低都是。小孩子觉得世界简单，大人
  觉得世界复杂，小孩子觉得大人复杂，大人觉得小孩子简单。显著区别的人可以划分为有限数个
  (比如生物类属)，类似的可以有无穷多(比如一到无穷)。但是这一切其实只是人类思维使然而已。

* 逻辑以直观为基础。而直观是可以被灌输的，不管是经验, 或教训, 或推理。

* 真的是代码吗，体现的都是人类的思想。

* 源代码组织也是重要的，比如不能太杂乱。认为编译后代码一致，或者从最终输出出发是不够的。

* 取决于你目标的上限，hard 模式是综合速度最快的，远快于easy 模式。

* 编程让造物主从对象自身设计，七个器官，五个手指。而使用量和效果也是依据二八法则，比如
  人类依赖视觉远多于听觉触觉嗅觉等。大拇指和食指的组合占据了大部分。

* Human程序语言 导致的结果是程序在执行和语义上更适合被分层，便于调试，降低复杂度。

* 因为 Human程序语言 是依据人类思维 而设计的，所以它可以辅助人类编程，尽可能降低程序复
  杂度。

* 比如 Array API 的操作函数可能就十几二十几个，但是因为这些函数返回的还是 Array 就不觉
  得其复杂了，只是觉得简单的多而已。举个例子，流水账易于理解，正是因为内在逻辑的扁平型，
  而康德哲学难以理解，看了下一个段落，就忘了上一个段落，正是因为他指的概念之间及其错综
  复杂。

* 为什么仔细想好写代码比快速实现在综合情况下更好。因为人类理解概念是按层次和组建来划分
  的，仔细想好写代码就意味着这些原则，而快速实现是暴力地把一大堆想法直接压扁到纸上，唯
  一的原则就是快速而正确。所以快速实现只适合短跑项目，即一次性小任务。

* 美是什么? 除了一些基本原则(比如黄金分割，复调呼应)外，好像无法从人类的思维特质里得到。

软件工程
----------------------------------
* 程序员写代码时考虑的是以后别人如何来看这段代码，而不仅仅是符合业务逻辑的代码即可。
  这点和画家很像，考虑的是别人如何看。音乐和文字等时间性的东西就没怎么讲究，更多是考虑
  自己当时的审美。

* 最底层核心业务数据按照UI设计是可怕的。这说明的是直接纵向设计到底是不对的。

* 好代码的标准：1。三秒内明白这几行代码对于全局的作用。2，半分钟明白全局架构。两者都不
  用太知道其中原理。

* 在多层循环时，习惯给每层变量后面加数字，用于表明是归属于第几层的。个人代码习惯而已。


QA
----------------------------------
Q: 文学编程的优劣?
A: TODO

Q: 选择 CoffeeScript 作为试验 Human程序语言 的原因?
A: 1. 用空格缩进来表达程序语义，并且比同样采用空格的 Python 更简约和有表达力(比如多行
   lambda)。2. 作者 @jashkenas 支持文学编程。3. 非语法上强制，最终都可以变异到诸如
   JavaScript等语言。

A: 目前作者我对于实现编程语言还有足够理论和经验基础，不改变编程语言行为，而只约束编程规
   范，这样对于作者我或者用户来说，成本是相对最小的。而且基于 #Human程序语言的理念# ，
   程序语言的范式和语法和库等，都只是作为思维对象而存在的。

Q: Human程序语言 的理念。
A: Human程序语言最大的特点和优势就是在于革新了人们关于编程语言的观点。不再以穿插在各个
   层次的并导致混乱不可维护的代码为思考点，而是以人类的思维作为出发点， 人类只善于在一
   个上下文里自由地思维最多六七个对象。对于把程序实现作为目标的程序员来说，需要同时兼
   顾好程序各个层次，以及业务各个层次，调整和理清每个部分是至关重要的。

Q: 思维的本质。
A: 在我看来，思维和自我应该是等价的，首先想到的原因是自我必须或只能通过思维来确定自我
   存在。详细论证得从哲学和脑科学等多方面来研究。 TODO

Q: Human程序语言 到底是编程语言 还是软件工程法则?
A: 首先是一个软件工程法则，但是会让编程语言更有利于表达这一法则。所以可以现在其他编程
   语言上尽可能实现，在有足够经验或不好实现时，会逐渐构建起来自己的编程语言。

Q: 什么是最佳代码(和具体何种编程语言无关)?
A: 最佳代码就是意味着尽可能好的工程实现。对于对方提出的任何切实问题，都可以在视觉上很
   容易(几秒到几十秒不等, 等价于一般人类等待网页打开的时间)。也即是代码尽可能在各个层
   次解释。

Q: 软件工作者 可以留下什么?
A: 生产的软件不仅自足，还可以作其他续用。比如公司一个内部项目，分离出一个MVC框架，开
   源了，别人可以继续用和改进。

Plan
----------------------------------
* 用 CoffeeScript 来实现第一版 语法和语义验证器。 具体原因见 #选择 CoffeeScript 作为试验
  Human程序语言 的原因?# [20141026]

Reference
----------------------------------
* http://www.ac.net.blog.163.com/blog/static/13649056201210173259510/ 这是因为平坦化和
  模块化破坏了函数的局部性，让读者难以理解。我们通常谈及CPU局部性，是指CPU访问相邻内存
  时要比访问远处内存时更快，因为相邻的内存有更大的可能性位于高速缓存中。人脑和CPU一样
  ，工作记忆很小，思考时如果思路不连贯效率就低下。


CoffeeScript
----------------------------------
* 好处是更让人觉得语法是为表达服务的，而且很容易理解不同形式的转换。


Human编程语言 设计草稿
----------------------------------
* 一个 **if** 里最多不得超过六七个条件
* **if** **else** 因为它的扁平型，是可以无限个的，但是一般用户也不会和没有条件这么做。
* 面向对象的根基是类。类可以把数据和行为捆绑起来，这样以数据为节点， 行为将它们连接起
  来，因此这样的本质性就是数据。函数式编程，或某些动态语言(比如 Python 把函数作为第
  一等公民) 把过程和数据同等强调，甚至可以修改自身，因而获得极大的灵活性。我意味函数
  就相当于故事。人类是用故事来理解世界的，评判一个人的好坏功过莫过于此。而故事是扁平
  化而易于理解的。
* 增加一段足够长度的注释就得一分。
* 概念越多，得分越高。但是同时也得排除概念的重复度或重复部分，这可能可以通过语义分析
  来得到，比如编译后的 JavaScript 。


