1. 写程序不单单是和机器沟通，更是和未来要看这段程序的人沟通的。试想要给另一个人讲解代码，首先你自己会在代码的每个层次上广度优先讲解，其次针对对方的提问，这提问却总是在一个层次上的（如果对方提了两个层次，你也会给对方分成两个层次讲），所以这一个层次的相关代码以某种方式集中在一个地方是有好处的，就像我们真实世界所谓有条理的布局一样。   －－－ 和函数式编程的固定输入输出一样（即变量不可以被重复赋值），把语境严格的划分在人类思维完全可以理解的范围内也是可行的。
2. 人类思维是否都是完全等价的。即只要有足够的耐心和时间讲解，对方一定会明白，然后TA也可以这样讲解给第三者。类似计算机的CPU和IO，以及信息传递。

# 参考
http://www.ac.net.blog.163.com/blog/static/13649056201210173259510/
这是因为平坦化和模块化破坏了函数的局部性，让读者难以理解。我们通常谈及CPU局部性，是指CPU访问相邻内存时要比访问远处内存时更快，因为相邻的内存有更大的可能性位于高速缓存中。人脑和CPU一样，工作记忆很小，思考时如果思路不连贯效率就低下。

